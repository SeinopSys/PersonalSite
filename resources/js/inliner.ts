import type { minify } from 'html-minifier';
import { saveAs } from 'file-saver';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { Blob } from 'blob-polyfill';

declare global {
  interface Window {
    minify: typeof minify;
  }
}

const $form = $('#inliner-form');
const $styles = $('#inliner-styles');
const $markup = $('#inliner-markup');

function getRules(css: string): CSSRuleList {
  const
    doc = document.implementation.createHTMLDocument('');
  const styleElement = document.createElement('style');

  styleElement.textContent = css;
  doc.body.appendChild(styleElement);

  const { sheet } = styleElement;
  if (!sheet) throw new Error('Expected sheet');

  return sheet.cssRules;
}

function getDocument(html: string) {
  const doc = document.createElement('div');
  doc.innerHTML = html;
  return doc;
}

$('#inliner-demo').on('click', e => {
  e.preventDefault();

  $styles.val($styles.attr('placeholder') as string).trigger('change');
  $markup.val($markup.attr('placeholder') as string).trigger('change');
  $form.triggerHandler('submit');
});

$form.on('submit', e => {
  e.preventDefault();

  const rules = getRules($styles.val() as string);
  const doc = getDocument($markup.val() as string);

  Array.from(rules).forEach(rule => {
    if (!(rule instanceof CSSStyleRule)) {
      return;
    }

    const els = doc.querySelectorAll(rule.selectorText);
    if (els) {
      Array.from(els).forEach(el => {
        const styleAttr = el.getAttribute('style');
        const prep = styleAttr ? styleAttr.replace(/([^;])$/, '$1;') : '';
        el.setAttribute('style', prep + rule.style.cssText);
      });
    }
  });
  Array.from(doc.querySelectorAll('[id]')).forEach(el => {
    el.removeAttribute('id');
  });

  const minified = window.minify(doc.innerHTML, {
    caseSensitive: false,
    collapseBooleanAttributes: true,
    collapseInlineTagWhitespace: false,
    collapseWhitespace: true,
    conservativeCollapse: false,
    decodeEntities: true,
    html5: true,
    includeAutoGeneratedTags: false,
    keepClosingSlash: false,
    minifyCSS: true,
    preserveLineBreaks: false,
    preventAttributesEscaping: false,
    processConditionalComments: true,
    processScripts: ['text/html'],
    removeAttributeQuotes: false,
    removeComments: true,
    removeEmptyAttributes: true,
    removeEmptyElements: false,
    removeOptionalTags: true,
    removeRedundantAttributes: true,
    removeScriptTypeAttributes: true,
    removeStyleLinkTypeAttributes: true,
    removeTagWhitespace: false,
    sortAttributes: true,
    sortClassName: true,
    trimCustomFragments: true,
    useShortDoctype: true,
  });
  const blob = new Blob([minified], { type: 'text/plain;charset=utf-8' });
  saveAs(blob, 'inlined.html');
})
  .on('reset', () => undefined);

$('#import-html-file').on('click', e => {
  e.preventDefault();

  const $filein = $(document.createElement('input')).attr({
    type: 'file',
    accept: '.html,text/html',
  });
  $filein.click();

  $filein.on('change', ce => {
    const { files } = ce.target;

    if (!files || !files[0]) return;

    const fr = new FileReader();
    fr.onload = function () {
      const markup = getDocument(fr.result as string);

      const styles = markup.querySelectorAll('style');
      if (styles) {
        const append: string[] = [];
        Array.from(styles)
          .forEach(el => {
            append.push(el.innerText.trim());
            el.parentNode?.removeChild(el);
          });
        $styles.val(append.join('\n'));
      }
      $markup.val(markup.innerHTML.trim());
    };
    fr.readAsText(files[0], 'UTF-8');
  });
});
