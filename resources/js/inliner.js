(function ($) {
    'use strict';

    const
        $form = $('#inliner-form'),
        $styles = $('#inliner-styles'),
        $markup = $('#inliner-markup');

    function getRules(css) {
        const
            doc = document.implementation.createHTMLDocument(""),
            styleElement = document.createElement("style");

        styleElement.textContent = css;
        doc.body.appendChild(styleElement);

        return styleElement.sheet.cssRules;
    }

    function getDocument(html) {
        const doc = document.createElement('div');
        doc.innerHTML = html;
        return doc;
    }

    $form.on('submit', function (e) {
        e.preventDefault();

        const
            rules = getRules($styles.val()),
            doc = getDocument($markup.val());

        Array.from(rules).forEach(rule => {
            const els = doc.querySelectorAll(rule.selectorText);
            if (els) {
                Array.from(els).forEach(el => {
                    const styleAttr = el.getAttribute('style');
                    const prep = styleAttr ? styleAttr.replace(/([^;])$/, '$1;') : '';
                    el.setAttribute('style', prep + rule.style.cssText);
                });
            }
        });
        Array.from(doc.querySelectorAll('[id]')).forEach(el => {
            el.removeAttribute('id');
        });

        const minified = require('html-minifier').minify(doc.innerHTML, {
            caseSensitive: false,
            collapseBooleanAttributes: true,
            collapseInlineTagWhitespace: false,
            collapseWhitespace: true,
            conservativeCollapse: false,
            decodeEntities: true,
            html5: true,
            includeAutoGeneratedTags: false,
            keepClosingSlash: false,
            minifyCSS: true,
            preserveLineBreaks: false,
            preventAttributesEscaping: false,
            processConditionalComments: true,
            processScripts: ["text/html"],
            removeAttributeQuotes: false,
            removeComments: true,
            removeEmptyAttributes: true,
            removeEmptyElements: false,
            removeOptionalTags: true,
            removeRedundantAttributes: true,
            removeScriptTypeAttributes: true,
            removeStyleLinkTypeAttributes: true,
            removeTagWhitespace: false,
            sortAttributes: true,
            sortClassName: true,
            trimCustomFragments: true,
            useShortDoctype: true,
        });
        const blob = new Blob([minified], {type: "text/plain;charset=utf-8"});
        saveAs(blob, 'inlined.html');
    }).on('reset');

    $('#import-html-file').on('click', function (e) {
        e.preventDefault();

        const $filein = $.mk('input').attr({
            type: 'file',
            accept: '.html,text/html',
        });
        $filein.click();

        $filein.on('change', function (e) {
            const files = e.target.files;

            if (!files[0])
                return;

            const fr = new FileReader();
            fr.onload = function (e) {
                const markup = getDocument(e.target.result);

                const styles = markup.querySelectorAll('style');
                if (styles) {
                    const append = [];
                    Array.from(styles).forEach(el => {
                        append.push(el.innerText.trim());
                        el.parentNode.removeChild(el);
                    });
                    $styles.val(append.join('\n'));
                }
                $markup.val(markup.innerHTML.trim());
            };
            fr.readAsText(files[0], 'UTF-8');
        });
    });
})(jQuery);
