{"version":3,"sources":["inliner.js"],"names":["$","$form","$styles","$markup","getDocument","html","doc","document","createElement","innerHTML","on","e","preventDefault","rules","css","implementation","createHTMLDocument","styleElement","textContent","body","appendChild","sheet","cssRules","getRules","val","Array","from","forEach","rule","els","querySelectorAll","selectorText","el","styleAttr","getAttribute","prep","replace","setAttribute","style","cssText","removeAttribute","minified","require","minify","caseSensitive","collapseBooleanAttributes","collapseInlineTagWhitespace","collapseWhitespace","conservativeCollapse","decodeEntities","html5","includeAutoGeneratedTags","keepClosingSlash","minifyCSS","preserveLineBreaks","preventAttributesEscaping","processConditionalComments","processScripts","removeAttributeQuotes","removeComments","removeEmptyAttributes","removeEmptyElements","removeOptionalTags","removeRedundantAttributes","removeScriptTypeAttributes","removeStyleLinkTypeAttributes","removeTagWhitespace","sortAttributes","sortClassName","trimCustomFragments","useShortDoctype","blob","Blob","type","saveAs","$filein","mk","attr","accept","click","files","target","fr","FileReader","onload","markup","result","styles","append","push","innerText","trim","parentNode","removeChild","join","readAsText","jQuery"],"mappings":"AAAA,cAAA,SAAWA,GAGP,IACIC,EAAQD,EAAE,iBACVE,EAAUF,EAAE,mBACZG,EAAUH,EAAE,mBAahB,SAASI,EAAYC,GACjB,IAAMC,EAAMC,SAASC,cAAc,OAEnC,OADAF,EAAIG,UAAYJ,EACTC,EAGXL,EAAMS,GAAG,UAAU,SAAUC,GACzBA,EAAEC,iBAEF,IACIC,EArBR,SAAkBC,GACd,IACIR,EAAMC,SAASQ,eAAeC,mBAAmB,IACjDC,EAAeV,SAASC,cAAc,SAK1C,OAHAS,EAAaC,YAAcJ,EAC3BR,EAAIa,KAAKC,YAAYH,GAEdA,EAAaI,MAAMC,SAadC,CAASrB,EAAQsB,OACzBlB,EAAMF,EAAYD,EAAQqB,OAE9BC,MAAMC,KAAKb,GAAOc,SAAQ,SAAAC,GACtB,IAAMC,EAAMvB,EAAIwB,iBAAiBF,EAAKG,cAClCF,GACAJ,MAAMC,KAAKG,GAAKF,SAAQ,SAAAK,GACpB,IAAMC,EAAYD,EAAGE,aAAa,SAC5BC,EAAOF,EAAYA,EAAUG,QAAQ,UAAW,OAAS,GAC/DJ,EAAGK,aAAa,QAASF,EAAOP,EAAKU,MAAMC,eAIvDd,MAAMC,KAAKpB,EAAIwB,iBAAiB,SAASH,SAAQ,SAAAK,GAC7CA,EAAGQ,gBAAgB,SAGvB,IAAMC,EAAWC,QAAQ,iBAAiBC,OAAOrC,EAAIG,UAAW,CAC5DmC,eAAe,EACfC,2BAA2B,EAC3BC,6BAA6B,EAC7BC,oBAAoB,EACpBC,sBAAsB,EACtBC,gBAAgB,EAChBC,OAAO,EACPC,0BAA0B,EAC1BC,kBAAkB,EAClBC,WAAW,EACXC,oBAAoB,EACpBC,2BAA2B,EAC3BC,4BAA4B,EAC5BC,eAAgB,CAAC,aACjBC,uBAAuB,EACvBC,gBAAgB,EAChBC,uBAAuB,EACvBC,qBAAqB,EACrBC,oBAAoB,EACpBC,2BAA2B,EAC3BC,4BAA4B,EAC5BC,+BAA+B,EAC/BC,qBAAqB,EACrBC,gBAAgB,EAChBC,eAAe,EACfC,qBAAqB,EACrBC,iBAAiB,IAEfC,EAAO,IAAIC,KAAK,CAAC/B,GAAW,CAACgC,KAAM,6BACzCC,OAAOH,EAAM,mBACd7D,GAAG,SAENV,EAAE,qBAAqBU,GAAG,SAAS,SAAUC,GACzCA,EAAEC,iBAEF,IAAM+D,EAAU3E,EAAE4E,GAAG,SAASC,KAAK,CAC/BJ,KAAM,OACNK,OAAQ,oBAEZH,EAAQI,QAERJ,EAAQjE,GAAG,UAAU,SAAUC,GAC3B,IAAMqE,EAAQrE,EAAEsE,OAAOD,MAEvB,GAAKA,EAAM,GAAX,CAGA,IAAME,EAAK,IAAIC,WACfD,EAAGE,OAAS,SAAUzE,GAClB,IAAM0E,EAASjF,EAAYO,EAAEsE,OAAOK,QAE9BC,EAASF,EAAOvD,iBAAiB,SACvC,GAAIyD,EAAQ,CACR,IAAMC,EAAS,GACf/D,MAAMC,KAAK6D,GAAQ5D,SAAQ,SAAAK,GACvBwD,EAAOC,KAAKzD,EAAG0D,UAAUC,QACzB3D,EAAG4D,WAAWC,YAAY7D,MAE9B9B,EAAQsB,IAAIgE,EAAOM,KAAK,OAE5B3F,EAAQqB,IAAI6D,EAAO5E,UAAUkF,SAEjCT,EAAGa,WAAWf,EAAM,GAAI,gBA7GpC,CAgHGgB","file":"../js/inliner.js","sourcesContent":["(function ($) {\n    'use strict';\n\n    const\n        $form = $('#inliner-form'),\n        $styles = $('#inliner-styles'),\n        $markup = $('#inliner-markup');\n\n    function getRules(css) {\n        const\n            doc = document.implementation.createHTMLDocument(\"\"),\n            styleElement = document.createElement(\"style\");\n\n        styleElement.textContent = css;\n        doc.body.appendChild(styleElement);\n\n        return styleElement.sheet.cssRules;\n    }\n\n    function getDocument(html) {\n        const doc = document.createElement('div');\n        doc.innerHTML = html;\n        return doc;\n    }\n\n    $form.on('submit', function (e) {\n        e.preventDefault();\n\n        const\n            rules = getRules($styles.val()),\n            doc = getDocument($markup.val());\n\n        Array.from(rules).forEach(rule => {\n            const els = doc.querySelectorAll(rule.selectorText);\n            if (els) {\n                Array.from(els).forEach(el => {\n                    const styleAttr = el.getAttribute('style');\n                    const prep = styleAttr ? styleAttr.replace(/([^;])$/, '$1;') : '';\n                    el.setAttribute('style', prep + rule.style.cssText);\n                });\n            }\n        });\n        Array.from(doc.querySelectorAll('[id]')).forEach(el => {\n            el.removeAttribute('id');\n        });\n\n        const minified = require('html-minifier').minify(doc.innerHTML, {\n            caseSensitive: false,\n            collapseBooleanAttributes: true,\n            collapseInlineTagWhitespace: false,\n            collapseWhitespace: true,\n            conservativeCollapse: false,\n            decodeEntities: true,\n            html5: true,\n            includeAutoGeneratedTags: false,\n            keepClosingSlash: false,\n            minifyCSS: true,\n            preserveLineBreaks: false,\n            preventAttributesEscaping: false,\n            processConditionalComments: true,\n            processScripts: [\"text/html\"],\n            removeAttributeQuotes: false,\n            removeComments: true,\n            removeEmptyAttributes: true,\n            removeEmptyElements: false,\n            removeOptionalTags: true,\n            removeRedundantAttributes: true,\n            removeScriptTypeAttributes: true,\n            removeStyleLinkTypeAttributes: true,\n            removeTagWhitespace: false,\n            sortAttributes: true,\n            sortClassName: true,\n            trimCustomFragments: true,\n            useShortDoctype: true,\n        });\n        const blob = new Blob([minified], {type: \"text/plain;charset=utf-8\"});\n        saveAs(blob, 'inlined.html');\n    }).on('reset');\n\n    $('#import-html-file').on('click', function (e) {\n        e.preventDefault();\n\n        const $filein = $.mk('input').attr({\n            type: 'file',\n            accept: '.html,text/html',\n        });\n        $filein.click();\n\n        $filein.on('change', function (e) {\n            const files = e.target.files;\n\n            if (!files[0])\n                return;\n\n            const fr = new FileReader();\n            fr.onload = function (e) {\n                const markup = getDocument(e.target.result);\n\n                const styles = markup.querySelectorAll('style');\n                if (styles) {\n                    const append = [];\n                    Array.from(styles).forEach(el => {\n                        append.push(el.innerText.trim());\n                        el.parentNode.removeChild(el);\n                    });\n                    $styles.val(append.join('\\n'));\n                }\n                $markup.val(markup.innerHTML.trim());\n            };\n            fr.readAsText(files[0], 'UTF-8');\n        });\n    });\n})(jQuery);\n"]}