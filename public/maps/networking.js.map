{"version":3,"sources":["networking.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","Object","toString","call","slice","name","Array","from","test","len","length","arr2","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","err","isArray","_inherits","subClass","superClass","create","writable","configurable","_setPrototypeOf","p","setPrototypeOf","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","result","Super","_getPrototypeOf","NewTarget","this","Reflect","construct","arguments","apply","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","sham","Proxy","Date","e","getPrototypeOf","_defineProperties","target","props","descriptor","enumerable","defineProperty","key","_createClass","Constructor","protoProps","staticProps","_classCallCheck","instance","$","$tabs","$w","on","hash","addClass","$linkedTab","$tabPills","find","removeClass","filter","show","$a","first","attr","hashchange","window","location","triggerHandler","each","_","el","trigger","isValid","$target","tagName","is","val","pattern","RegExp","octetPad","bin","pad","blockPad","ipPad","dir","ipv6","chr","ipv6trim","replace","decbin","dec","separator","binary","split","parseInt","join","bindec","indexOf","match","binhex","hex","ipversion","cidr","parts","fitsIntoPowerOf2","Math","pow","ceil","log","log2","LOG2E","ns","$network","$subnets","$form","$output","$networkAlert","$subnetsAlert","ValidationError","string","message","BinaryIncrementable","start","by","address","getBinary","range","substring","incremented","Error","max","setBinary","amount","original","left","j","carry","IPV4Address","_BinaryIncrementable","_super","dotdec","_this","translatePlaceholders","Laravel","jsLocales","vlsm_error_ipadd_format_invalid","part","isNaN","vlsm_error_ipadd_octet_invalid","why","vlsm_error_ipadd_octet_invalid_nan","vlsm_error_ipadd_octet_invalid_range","mask","ipbin","maskbin","netbin","l","dotted","IPV6AddressBlock","toLowerCase","IPV6Address","_BinaryIncrementable2","_super2","colonhex","_this2","sections","vlsm_error_ipv6add_short_invalid","blocks","strRepeat","map","parseBlock","prepend","splice","concat","vlsm_error_ipv6add_too_many_blocks","moreblocks","tmpparts","partsum","coloned","block","vlsm_error_ipv6add_block_invalid","vlsm_error_ipv6add_block_invalid_nan","vlsm_error_ipv6add_block_invalid_range","Netmask","skipValidation","min","vlsm_error_mask_length_invalid","getReverseBinary","getDecimal","withSeparators","right","_separateBinary","Network","_split","ip","trim","networkAddress","to","Subnet","line","vlsm_error_subnet_line_invalid","vlsm_error_subnet_line_invalid_format","vlsm_error_subnet_line_invalid_count","_number","cap","rangeLimit","minimumPCs","minimumIPs","addressCount","empty","vlsm_subnet_tostring","addresscount","usable","SubnetList","netArray","_this3","networks","sn","PrefixListEntry","opts","seq","prefix_list_error_seq_number_invalid","action","subnet","le","prefix_list_error_gtlen","netw","ge","prefix_list_error_ge_le","network","subnetIp","console","nets","acf","bc","bf","cc","cf","preventDefault","$this","index","$input","parents","setTimeout","$disp","prev","children","ver","text","outputMode","$outputMode","$outputSimple","lsKey","setOutputMode","mode","localStorage","setItem","removeItem","getItem","updateOutputDisplay","nextAll","$li","closest","hasClass","subnetData","add","hide","end","sort","a","b","localeCompare","html","$subnetsOutput","currentNetwork","lastSubnet","simpleOutput","getAbbrev","subnets","bail","maxMaskLength","newip","newmask","addBinary","vlsm_network_too_small","append","vlsm_mask_reverse","getReverseDecimal","vlsm_info_line","pcs","ips","id","subnetCount","cidr_error_subnet_line_invalid_format","actualSubnetCount","extraBits","vlsm_error_mask_length_overflow","setMask","output","incrRange","$ol","mk","$networks","$networksAlert","addresses","summary_error_mixed_ip_versions","uniqAddrs","keys","uniqAddrCnt","summary_not_enough_addresses","maxLength","bit","loop","currbit","summary_uncommon","fromBinary","$showOutput","$showOutputAlert","prefixListEntryPattern","prefixListEntryRegex","prefixListRegex","source","error_ipv4_only","showOutput","entries","prefix_list_error_show_invalid","exec","_parts$slice2","netAddress","maskLength","prefix_list_error_seq_invalid","matchingEntry","entry","matches","prefix_list_match","prefix_list_nomatch","$tbody","jQuery"],"mappings":"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","file":"../js/networking.js","sourcesContent":["(function ($) {\n    'use strict';\n\n    let $tabs = $('#main-tabs'),\n        hashchange = function (hash) {\n            if (hash && /^#[a-z-]+$/.test(hash)) {\n\n                $('.tab-panel').addClass('d-none');\n                const $linkedTab = $(hash);\n                const $tabPills = $tabs.find('a').removeClass('active');\n                if ($linkedTab.length) {\n                    $linkedTab.removeClass('d-none');\n                    $tabPills.filter(function () {\n                        return this.hash === hash;\n                    }).addClass('active');\n                } else $('.tab-panel.not-found').removeClass('d-none').show();\n            } else {\n                let $a = $tabs.find('a').first().addClass('active');\n                $($a.attr('href')).removeClass('d-none');\n            }\n        };\n    $w.on('hashchange', function () {\n        hashchange(window.location.hash);\n    }).triggerHandler('hashchange');\n\n    $('.tab-panel form').on('clear', e => {\n        $(e.target).find('.form-control[required], .form-control[pattern]').each((_, el) => {\n            $(el).trigger('change');\n        });\n    });\n\n    $('.form-control[required], .form-control[pattern]').on('keydown keyup change', e => {\n        const $target = $(e.target);\n        let isValid;\n        if (e.target.tagName === 'INPUT')\n            isValid = $target.is(':valid');\n        else {\n            if (typeof $target.attr('required') !== 'undefined')\n                isValid = $target.val().length > 0;\n            else isValid = true;\n\n            if (isValid) {\n                const pattern = $target.attr('pattern');\n                if (typeof pattern !== 'undefined') {\n                    isValid = new RegExp(pattern).test($target.val());\n                }\n            }\n        }\n        $target[isValid ? 'removeClass' : 'addClass']('is-invalid');\n    }).trigger('change');\n\n    let octetPad = bin => $.pad(bin, '0', 8),\n        blockPad = bin => $.pad(bin, '0', 16),\n        ipPad = (bin, dir, ipv6 = false, chr = '0') => $.pad(bin, chr, ipv6 ? 128 : 32, dir),\n        ipv6trim = ipv6 => ipv6.replace(/(^|:)0(:0)*:0(:|$)/, '::'),\n        decbin = (dec, separator, ipv6 = false) => {\n            let binary = [];\n            if (typeof dec === 'string')\n                dec = dec.split(separator);\n            $.each(dec, (_, el) => {\n                binary.push((ipv6 ? blockPad : octetPad)(parseInt(el, 10).toString(2)));\n            });\n            return binary.join(separator);\n        },\n        bindec = bin => {\n            let dec = [];\n            if (typeof bin === 'number')\n                bin = bin.toString(2);\n            bin = bin.indexOf('.') === -1 ? bin.match(/.{8}/g) : bin.split('.');\n            $.each(bin, (_, el) => {\n                dec.push(parseInt(el, 2));\n            });\n            return dec.join('.');\n        },\n        binhex = bin => {\n            let hex = [];\n            if (typeof bin === 'number')\n                bin = bin.toString(2);\n            bin = bin.indexOf(':') === -1 ? bin.match(/.{16}/g) : bin.split(':');\n            $.each(bin, (_, el) => {\n                hex.push(parseInt(el, 2).toString(16));\n            });\n            return ipv6trim(hex.join(':'));\n        },\n        ipversion = cidr => {\n            const parts = cidr.split('/');\n            if (parts.length > 2)\n                return false;\n            if (/^[\\d.]+$/.test(parts[0]))\n                return '4';\n            if (/^[\\da-f:]+$/i.test(parts[0]))\n                return '6';\n            return false;\n        },\n        fitsIntoPowerOf2 = n => Math.pow(2, Math.ceil(Math.log(n) / Math.log(2)));\n\n    if (typeof Math.log2 !== 'function')\n        Math.log2 = n => Math.log(n) * Math.LOG2E;\n\n    class ValidationError {\n        constructor(string) {\n            this.message = string;\n            this.name = 'ValidationError';\n        }\n    }\n\n    class BinaryIncrementable {\n        /**\n         * @param {int} start\n         * @param {int} length\n         * @param {int} by\n         */\n        incrRange(start, length, by) {\n            if (typeof by !== 'number')\n                by = 1;\n\n            let address = this.getBinary(),\n                range = address.substring(start, start + length),\n                incremented = $.pad((parseInt(range, 2) + by).toString(2), '0', length);\n            if (incremented.length > length)\n                throw new Error('Incremented length exceeds available space');\n            address = address.substring(0, start) + incremented + address.substring(start + Math.max(length, incremented.length));\n            this.setBinary(address);\n\n            return this;\n        }\n\n        getBinary() {\n            throw new Error('Method must be implemented by extending class');\n        }\n\n        setBinary() {\n            throw new Error('Method must be implemented by extending class');\n        }\n\n        /**\n         * https://stackoverflow.com/a/42306236/1344955\n         *\n         * @param {string} amount\n         * @return {string}\n         */\n        addBinary(amount) {\n            const original = this.getBinary();\n            if (typeof amount !== 'string')\n                amount = amount.toString(2);\n            if (amount.length < original.length)\n                amount = $.pad(amount, '0', original.length, $.pad.left);\n            let i = original.length - 1,\n                j = amount.length - 1,\n                carry = 0,\n                result = '';\n            //jshint -W016\n            while (i >= 0 || j >= 0) {\n                let m = i < 0 ? 0 : original[i] | 0,\n                    n = j < 0 ? 0 : amount[j] | 0;\n                carry += m + n; // sum of two digits\n                result = carry % 2 + result; // string concat\n                carry = carry / 2 | 0; // remove decimals,  1 / 2 = 0.5, only get 0\n                i--;\n                j--;\n            }\n            if (carry !== 0)\n                result = carry + result;\n\n            this.setBinary(result);\n            return this;\n        }\n    }\n\n    class IPV4Address extends BinaryIncrementable {\n        /**\n         * @param {string} dotdec\n         */\n        constructor(dotdec) {\n            super();\n            this.parts = dotdec.split('.');\n            if (this.parts.length !== 4)\n                throw new ValidationError(\n                    $.translatePlaceholders(Laravel.jsLocales.vlsm_error_ipadd_format_invalid, {dotdec})\n                );\n            $.each(this.parts, (i, el) => {\n                let part = parseInt(el, 10);\n                if (isNaN(part))\n                    throw new ValidationError(\n                        $.translatePlaceholders(Laravel.jsLocales.vlsm_error_ipadd_octet_invalid, {\n                            dotdec: dotdec,\n                            n: i + 1,\n                            why: Laravel.jsLocales.vlsm_error_ipadd_octet_invalid_nan,\n                        })\n                    );\n                if (part > 255 || part < 0)\n                    throw new ValidationError(\n                        $.translatePlaceholders(Laravel.jsLocales.vlsm_error_ipadd_octet_invalid, {\n                            dotdec: dotdec,\n                            n: i + 1,\n                            why: Laravel.jsLocales.vlsm_error_ipadd_octet_invalid_range,\n                        })\n                    );\n                this.parts[i] = part;\n            });\n        }\n\n        /**\n         * @param {Netmask} mask\n         */\n        networkAddress(mask) {\n            let ipbin = this.getBinary(),\n                maskbin = mask.getBinary(),\n                netbin = '';\n\n            for (let i = 0, l = maskbin.length; i < l; i++)\n                netbin += maskbin[i] === '1' ? ipbin[i] : maskbin[i];\n\n            return new IPV4Address(bindec(netbin));\n        }\n\n        toString() {\n            return this.parts.join('.');\n        }\n\n        getBinary(dotted = false) {\n            return decbin(this.parts, dotted ? '.' : '');\n        }\n\n        setBinary(bin, dotted = false) {\n            if (dotted)\n                bin = bin.replace(/\\./g, '');\n            this.constructor(bindec(bin));\n            return this;\n        }\n\n        static fromBinary(bin, dotted = false) {\n            if (dotted)\n                bin = bin.replace(/\\./g, '');\n            return new IPV4Address(bindec(bin));\n        }\n    }\n\n    class IPV6AddressBlock {\n        constructor(value = 0) {\n            this.value = value;\n        }\n\n        toString(pad = false) {\n            let val = this.value.toString(16).toLowerCase();\n            if (pad)\n                val = $.pad(val, '0', 4);\n            return val;\n        }\n    }\n\n    class IPV6Address extends BinaryIncrementable {\n        constructor(colonhex) {\n            super();\n            // Check for shortening symbol\n            if (colonhex.indexOf('::') !== -1) {\n                let sections = colonhex.split('::');\n                if (sections.length > 2)\n                    throw new ValidationError(\n                        $.translatePlaceholders(Laravel.jsLocales.vlsm_error_ipv6add_short_invalid, {colonhex})\n                    );\n\n                // :: is at the beginning\n                if (sections[0].length === 0) {\n                    // The string ends after :: it's an empty adress\n                    if (sections[1].length === 0) {\n                        this.blocks = $.strRepeat('0', 8).split('').map(() => new IPV6AddressBlock());\n                    }\n                    // We have stuff after :: so parse it\n                    else {\n                        const blocks = sections[1].split(':');\n                        this.blocks = [];\n                        $.each(blocks, (n, el) => {\n                            this.blocks.push(IPV6Address.parseBlock(el, colonhex, n));\n                        });\n                        // Fill the beginning with zeroes\n                        if (this.blocks.length < 8) {\n                            let prepend = [];\n                            for (let i = 0; i < 8 - this.blocks.length; i++)\n                                prepend.push(new IPV6AddressBlock());\n                            this.blocks.splice.apply(this.blocks, [0, 0].concat(prepend));\n                        } else if (this.blocks.length > 8)\n                            throw new ValidationError(\n                                $.translatePlaceholders(Laravel.jsLocales.vlsm_error_ipv6add_too_many_blocks, {colonhex})\n                            );\n                    }\n                }\n                // We have stuff before ::\n                else {\n                    const blocks = sections[0].split(':');\n                    this.blocks = [];\n                    $.each(blocks, (n, el) => {\n                        this.blocks.push(IPV6Address.parseBlock(el, colonhex, n));\n                    });\n                    // String ends after ::\n                    if (sections[1].length === 0) {\n                        // Fill the end with zeroes\n                        if (this.blocks.length < 8)\n                            while (this.blocks.length < 8)\n                                this.blocks.push(new IPV6AddressBlock());\n                        else if (this.blocks.length > 8)\n                            throw new ValidationError(\n                                $.translatePlaceholders(Laravel.jsLocales.vlsm_error_ipv6add_too_many_blocks, {colonhex})\n                            );\n                    }\n                    // There's more data after ::\n                    else {\n                        const moreblocks = sections[1].split(':');\n                        let tmpparts = [];\n                        $.each(moreblocks, (n, el) => {\n                            tmpparts.push(IPV6Address.parseBlock(el, colonhex, n));\n                        });\n\n                        const partsum = this.blocks.length + tmpparts.length;\n                        if (partsum > 8)\n                            throw new ValidationError(\n                                $.translatePlaceholders(Laravel.jsLocales.vlsm_error_ipv6add_too_many_blocks, {colonhex})\n                            );\n                        if (partsum !== 8)\n                            for (let i = 0; i < 8 - partsum; i++)\n                                this.blocks.push(new IPV6AddressBlock());\n                        this.blocks.splice.apply(this.blocks, [this.blocks.length, 0].concat(tmpparts));\n                    }\n                }\n            }\n            // No shortening, parse normally\n            else {\n                let blocks = colonhex.split(':');\n                if (blocks.length > 8)\n                    throw new ValidationError(\n                        $.translatePlaceholders(Laravel.jsLocales.vlsm_error_ipv6add_too_many_blocks, {colonhex})\n                    );\n                this.blocks = [];\n                $.each(blocks, (n, el) => {\n                    this.blocks.push(IPV6Address.parseBlock(el, colonhex, n));\n                });\n            }\n        }\n\n        static parseBlock(block, colonhex, n) {\n            const value = parseInt(block, 16);\n\n            if (isNaN(value) || !/^[a-f\\d]{1,4}$/i.test(block)) {\n                throw new ValidationError(\n                    $.translatePlaceholders(Laravel.jsLocales.vlsm_error_ipv6add_block_invalid, {\n                        colonhex,\n                        n,\n                        why: Laravel.jsLocales.vlsm_error_ipv6add_block_invalid_nan,\n                    })\n                );\n            } else if (value < 0 || value > 0xFFFF)\n                throw new ValidationError(\n                    $.translatePlaceholders(Laravel.jsLocales.vlsm_error_ipv6add_block_invalid, {\n                        colonhex,\n                        n,\n                        why: Laravel.jsLocales.vlsm_error_ipv6add_block_invalid_range,\n                    })\n                );\n\n            return new IPV6AddressBlock(value);\n        }\n\n        toString() {\n            return ipv6trim(this.blocks.join(':'));\n        }\n\n        getBinary(coloned = false) {\n            return decbin(this.blocks.map(el => el.value), coloned ? ':' : '', true);\n        }\n\n        setBinary(bin, coloned = false) {\n            if (coloned)\n                bin = bin.replace(/:/g, '');\n            this.constructor(binhex(bin));\n            return this;\n        }\n\n        static fromBinary(bin, coloned = false) {\n            if (coloned)\n                bin = bin.replace(/:/g, '');\n            return new IPV6Address(binhex(bin));\n        }\n\n        /**\n         * @param {Netmask} mask\n         */\n        networkAddress(mask) {\n            let ipbin = this.getBinary(),\n                maskbin = mask.getBinary(),\n                netbin = '';\n\n            for (let i = 0, l = maskbin.length; i < l; i++)\n                netbin += maskbin[i] === '1' ? ipbin[i] : maskbin[i];\n\n            return new IPV6Address(binhex(netbin));\n        }\n    }\n\n    class Netmask {\n        constructor(length, skipValidation = false, ipv6 = false) {\n            this.ipv6 = ipv6;\n            this.length = parseInt(length, 10);\n            if (!skipValidation) {\n                const max = ipv6 ? 128 : 32;\n                const min = 0;\n                if (this.length > max || this.length < min)\n                    throw new ValidationError(\n                        $.translatePlaceholders(Laravel.jsLocales.vlsm_error_mask_length_invalid, {max, min})\n                    );\n            }\n        }\n\n        toString() {\n            return this.length.toString();\n        }\n\n        getDecimal() {\n            return (this.ipv6 ? binhex : bindec)(this.getBinary());\n        }\n\n        getReverseDecimal() {\n            return (this.ipv6 ? binhex : bindec)(this.getReverseBinary());\n        }\n\n        /**\n         * Returns an easy to understand abbreviation based on length\n         * Multiples of 8 and 30 are returned as numbers\n         * Any other length is returned without preceeding 255 octets\n         */\n        getAbbrev() {\n            if (this.ipv6 || this.length === 30 || this.length % 8 === 0)\n                return this.length;\n\n            return this.getDecimal().replace(/^(?:255(\\.))+/, '$1');\n        }\n\n        static _separateBinary(binary) {\n            return binary.match(new RegExp('.{' + (this.ipv6 ? 16 : 8) + '}', 'g')).join(this.ipv6 ? ':' : '.');\n        }\n\n        getBinary(withSeparators = false) {\n            let binary = ipPad(Array(this.length + 1).join('1'), $.pad.right, this.ipv6);\n            if (withSeparators)\n                binary = Netmask._separateBinary(binary);\n            return binary;\n        }\n\n        getReverseBinary(withSeparators = false) {\n            let binary = ipPad(Array(this.length + 1).join('0'), $.pad.right, this.ipv6, '1');\n            if (withSeparators)\n                binary = Netmask._separateBinary(binary);\n            return binary;\n        }\n    }\n\n    class Network {\n        constructor(cidr) {\n            let _split = cidr.split('/');\n            const\n                ip = _split[0].trim(),\n                ipv6 = ipversion(cidr) === '6';\n            this.mask = new Netmask(_split[1].trim(), false, ipv6);\n            this.ip = (ipv6 ? new IPV6Address(ip) : new IPV4Address(ip)).networkAddress(this.mask);\n        }\n\n        toString() {\n            return this.ip + '/' + this.mask;\n        }\n\n        setMask(to, ipv6 = false) {\n            this.mask = new Netmask(to, false, ipv6);\n            this.ip = this.ip.networkAddress(this.mask);\n\n            return this;\n        }\n    }\n\n    class Subnet {\n        constructor(line, ipv6) {\n            let _split = line.trim().replace(/(?:^|\\s+)\\/\\/.*$/, '');\n            if (_split.length === 0) {\n                this.empty = true;\n                return;\n            }\n            _split = _split.match(/^\\s*(.*)\\s+(\\d+|\\/\\d{1,3})(?:\\s+(gép|eszköz|ips?|pcs?|devices?|ger[aä]te?))?\\s*$/i);\n            if (!_split)\n                throw new ValidationError(\n                    $.translatePlaceholders(Laravel.jsLocales.vlsm_error_subnet_line_invalid, {\n                        line: line,\n                        why: Laravel.jsLocales.vlsm_error_subnet_line_invalid_format,\n                    })\n                );\n            _split = _split.slice(1);\n            if (_split.length < 2)\n                throw new ValidationError(\n                    $.translatePlaceholders(Laravel.jsLocales.vlsm_error_subnet_line_invalid, {\n                        line: line,\n                        why: Laravel.jsLocales.vlsm_error_subnet_line_invalid_count,\n                    })\n                );\n            this.name = _split[0];\n\n            let _number;\n            if (_split[1][0] === '/') {\n                const cap = ipv6 ? 128 : 32;\n                _number = Math.pow(2, cap - $.rangeLimit(parseInt(_split[1].substring(1)), false, 0, cap));\n                _split[2] = 'ip';\n            } else _number = parseInt(_split[1]);\n            if (/^ips?$/.test(_split[2])) {\n                this.minimumPCs = _number - 2;\n                this.minimumIPs = _number;\n            } else {\n                this.minimumPCs = _number;\n                this.minimumIPs = _number + 2;\n            }\n            this.addressCount = fitsIntoPowerOf2(this.minimumIPs);\n        }\n\n        toString() {\n            return $.translatePlaceholders(Laravel.jsLocales.vlsm_subnet_tostring, {\n                name: this.name,\n                addresscount: this.addressCount,\n                usable: Math.max(0, this.addressCount - 2),\n            });\n        }\n    }\n\n    class SubnetList {\n        constructor(netArray, ipv6) {\n            this.networks = [];\n            $.each(netArray, (_, el) => {\n                let sn = new Subnet(el, ipv6);\n                if (sn.empty)\n                    return;\n                this.networks.push(sn);\n            });\n        }\n    }\n\n    class PrefixListEntry {\n        constructor(opts) {\n            this.seq = parseInt(opts.seq, 10);\n            let [min, max] = [1, 4294967294];\n            if (this.seq < min || this.seq > max)\n                throw new ValidationError(\n                    $.translatePlaceholders(Laravel.jsLocales.prefix_list_error_seq_number_invalid, {min, max})\n                );\n\n            this.action = opts.action;\n            this.subnet = opts.subnet;\n            if (typeof opts.le !== 'undefined') {\n                this.le = parseInt(opts.le, 10);\n                if (this.subnet.mask.length >= this.le)\n                    throw new ValidationError(\n                        $.translatePlaceholders(Laravel.jsLocales.prefix_list_error_gtlen, {\n                            netw: this.subnet,\n                            len: this.subnet.mask.length,\n                            val: this.le + ' (le)',\n                        })\n                    );\n            } else this.le = null;\n            if (typeof opts.ge !== 'undefined') {\n                this.ge = parseInt(opts.ge, 10);\n                if (this.subnet.mask.length >= this.ge)\n                    throw new ValidationError(\n                        $.translatePlaceholders(Laravel.jsLocales.prefix_list_error_gtlen, {\n                            netw: this.subnet,\n                            len: this.subnet.mask.length,\n                            val: this.ge + ' (ge)',\n                        })\n                    );\n                if (this.le !== null) {\n                    if (this.ge > this.le)\n                        throw new ValidationError(\n                            $.translatePlaceholders(Laravel.jsLocales.prefix_list_error_ge_le, {\n                                netw: this.subnet,\n                                len: this.subnet.mask.length,\n                                ge: this.ge,\n                                le: this.le,\n                            })\n                        );\n                }\n            } else this.ge = null;\n        }\n\n        /**\n         * @param {Network} network\n         */\n        matches(network) {\n            if (this.ge === null && this.le === null)\n                return this.subnet.toString() === network.toString();\n\n            const subnetIp = this.subnet.ip.toString();\n            if (this.subnet.mask.length === 0)\n                network = new Network(subnetIp + '/' + network.mask.length);\n            const from = this.le || 32;\n            const to = this.ge || 0;\n            for (let l = from; l >= to; l--) {\n                const ip = network.mask.length === l ? network.ip : network.ip.networkAddress(new Netmask(l));\n                console.log(subnetIp, ip.toString(), l, network.mask.length);\n                if (subnetIp === ip.toString() && l === network.mask.length)\n                    return true;\n            }\n        }\n    }\n\n    let nets = {\n        acf: '10.0.0.0/8',\n        bc: '172.16.0.0/16',\n        bf: '172.16.0.0/12',\n        cc: '192.168.0.0/24',\n        cf: '192.168.0.0/16',\n    };\n\n    $(`.ql-acf, .ql-bc, .ql-bf, .ql-cc, .ql-cf`).on('click', function (e) {\n        e.preventDefault();\n\n        let $this = $(this),\n            index = $this.attr('class').replace('ql-', ''),\n            $input = $this.parents('.form-group').find('input[id]');\n        $input.addClass('fade');\n        setTimeout(() => {\n            $input.val(nets[index]).removeClass('fade').trigger('change');\n        }, 105);\n    });\n\n    $('.network-input').on('keyup change input', function () {\n        const\n            $this = $(this),\n            $disp = $this.prev().children(),\n            ver = ipversion($this.val()) || '?';\n        $disp.text(\"IPv\" + ver);\n    });\n\n    (function (ns) {\n        const $network = $(`#${ns}-network`),\n            $subnets = $(`#${ns}-subnets`),\n            $networkAlert = $(`#${ns}-network-alert`),\n            $subnetsAlert = $(`#${ns}-subnets-alert`),\n            $output = $(`#${ns}-output`),\n            $outputMode = $(`#${ns}-output-mode`),\n            $outputSimple = $(`#${ns}-output-simple`),\n            $form = $(`#${ns}-form`),\n            lsKey = 'networking-vlsm_output_type';\n\n        let outputMode;\n        const setOutputMode = mode => {\n            if (mode === 'simple') {\n                outputMode = mode;\n                if (window.localStorage)\n                    localStorage.setItem(lsKey, outputMode);\n            } else {\n                outputMode = 'fancy';\n                if (window.localStorage)\n                    localStorage.removeItem(lsKey);\n            }\n        };\n        if (window.localStorage)\n            setOutputMode(localStorage.getItem(lsKey));\n        const updateOutputDisplay = () => {\n            $outputMode.find('a').removeClass('active').filter(`[data-mode=\"${outputMode}\"]`).addClass('active');\n            $outputMode.nextAll().addClass('d-none').filter(`.${outputMode}-only`).removeClass('d-none');\n        };\n\n        $outputMode.on('click', 'a[data-mode]', e => {\n            const $li = $(e.target).closest('a');\n\n            if ($li.hasClass('active'))\n                return;\n\n            setOutputMode($li.attr('data-mode'));\n            updateOutputDisplay();\n        });\n\n        $form.on('submit', function (e) {\n            e.preventDefault();\n\n            let network, subnetData;\n            $networkAlert.add($subnetsAlert).hide();\n\n            try {\n                network = new Network($network.val());\n            } catch (err) {\n                if (!(err instanceof ValidationError))\n                    throw err;\n                $networkAlert.children('.text').text(e.message).end().show();\n                return $output.addClass('d-none');\n            }\n\n            const ipv6 = network.ip instanceof IPV6Address;\n\n            try {\n                subnetData = new SubnetList($subnets.val().split('\\n'), ipv6);\n            } catch (err) {\n                if (!(err instanceof ValidationError))\n                    throw err;\n                $subnetsAlert.children('.text').text(e.message).end().show();\n                return $output.addClass('d-none');\n            }\n\n            // Sort subnets by number of adresses (descending)\n            subnetData.networks = subnetData.networks.sort(function (a, b) {\n                if (a.addressCount === b.addressCount)\n                    return a.name.localeCompare(b.name);\n                return a.addressCount > b.addressCount ? -1 : 1;\n            });\n\n            // OUTPUT PHASE\n            $output.removeClass('d-none');\n            updateOutputDisplay();\n            $(`#${ns}-ip-dec`).text(network.ip.toString());\n            $(`#${ns}-mask-dec`).html(network.mask.getDecimal() + ' &mdash;&rarr; /' + network.mask.length);\n            let $subnetsOutput = $(`#${ns}-subnets-output`).children('tbody').empty(),\n                currentNetwork = network,\n                lastSubnet = null,\n                simpleOutput = [\n                    `${Laravel.jsLocales.network}: ${network.ip.toString()}/${network.mask.getAbbrev()}`,\n                    Laravel.jsLocales.subnets + ':',\n                ],\n                bail = false;\n            const maxMaskLength = ipv6 ? 128 : 32;\n            $.each(subnetData.networks, (i, subnet) => {\n                let newip,\n                    newmask = maxMaskLength - Math.log2(subnet.addressCount);\n\n                if (i > 0) {\n                    let currip = currentNetwork.ip;\n                    newip = currip.addBinary(lastSubnet.addressCount).toString();\n                } else {\n                    if (newmask < currentNetwork.mask.length) {\n                        $subnetsAlert.children('.text').text(Laravel.jsLocales.vlsm_network_too_small).end().show();\n                        $output.addClass('d-none');\n                        return !(bail = true);\n                    }\n                    newip = network.ip.toString();\n                }\n\n                try {\n                    currentNetwork = new Network(newip + '/' + newmask);\n                } catch (e) {\n                    if (!(e instanceof ValidationError))\n                        throw e;\n\n                    $subnetsAlert.children('.text').text(e.message).end().show();\n                    $output.addClass('d-none');\n                    return !(bail = true);\n                }\n                lastSubnet = subnet;\n\n                simpleOutput.push(`${subnet.name} | ${currentNetwork.ip.toString()}/${currentNetwork.mask.getAbbrev()}`);\n\n                $subnetsOutput.append(\n                    `<tr>\n\t\t\t\t\t\t<th rowspan=\"2\" class=\"bg-primary text-white sn-name\">${subnet.name}</th>\n\t\t\t\t\t\t<td>${currentNetwork.ip.toString()}</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t${currentNetwork.mask.getDecimal()} &mdash;&rarr; /${currentNetwork.mask.length}<br>\n\t\t\t\t\t\t\t(${Laravel.jsLocales.vlsm_mask_reverse}: ${currentNetwork.mask.getReverseDecimal()})\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr class=\"table-info\">\n\t\t\t\t\t\t<td colspan=\"2\">\n\t\t\t\t\t\t\t${$.translatePlaceholders(Laravel.jsLocales.vlsm_info_line, {\n                        pcs: subnet.minimumPCs,\n                        ips: subnet.minimumIPs,\n                    })}\n\t\t\t\t\t\t\t&mdash;&rarr;\n\t\t\t\t\t\t\t${$.translatePlaceholders(Laravel.jsLocales.vlsm_info_line, {\n                        pcs: subnet.addressCount - 2,\n                        ips: subnet.addressCount,\n                    })}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>`\n                );\n            });\n\n            if (!bail)\n                $outputSimple.html($('<div class=\"card-body\"/>').text(simpleOutput.join('\\n')));\n        }).on('reset', function () {\n            $output.addClass('d-none');\n            $(this).find('.network-input').val('').trigger('change');\n        });\n\n        $(`#${ns}-predefined-data, #${ns}-predefined-data-v6`).on('click', function (e) {\n            e.preventDefault();\n\n            const ipv6 = this.id.indexOf('-v6') !== -1;\n\n            $network.val(ipv6 ? '2001:db8:85a3::1/64' : '193.30.30.0/24').trigger('change');\n            $subnets.val(\n                'A 30\\n' +\n                'B 60\\n' +\n                'C-VLAN1 10\\n' +\n                'D-VLAN30 14\\n' +\n                'E-VLAN40 14\\n' +\n                `F /${ipv6 ? 126 : 30}\\n` +\n                `G /${ipv6 ? 126 : 30}`\n            ).trigger('change');\n            $form.triggerHandler('submit');\n        });\n    })('vlsm');\n\n    (function (ns) {\n        let $network = $(`#${ns}-network`),\n            $subnets = $(`#${ns}-subnets`),\n            $form = $(`#${ns}-form`),\n            $output = $(`#${ns}-output`),\n            $networkAlert = $(`#${ns}-network-alert`),\n            $subnetsAlert = $(`#${ns}-subnets-alert`);\n\n        $form.on('submit', function (e) {\n            e.preventDefault();\n\n            let network, subnetCount;\n            $networkAlert.add($subnetsAlert).hide();\n\n            try {\n                network = new Network($network.val());\n            } catch (err) {\n                if (!(err instanceof ValidationError))\n                    throw err;\n                $networkAlert.children('.text').text(e.message).end().show();\n                return $output.empty();\n            }\n            try {\n                subnetCount = parseInt($subnets.val().trim(), 10);\n                if (isNaN(subnetCount))\n                    throw new ValidationError(Laravel.jsLocales.cidr_error_subnet_line_invalid_format);\n            } catch (err) {\n                if (!(err instanceof ValidationError))\n                    throw err;\n                $subnetsAlert.children('.text').text(e.message).end().show();\n                return $output.empty();\n            }\n\n            const ipv6 = network.ip instanceof IPV6Address;\n\n            let actualSubnetCount = fitsIntoPowerOf2(subnetCount),\n                extraBits = Math.log2(actualSubnetCount),\n                newmask = network.mask.length + extraBits;\n            if (newmask > (ipv6 ? 127 : 31) || newmask < 1) {\n                $subnetsAlert.children('.text').text(Laravel.jsLocales.vlsm_error_mask_length_overflow).end().show();\n                return $output.empty();\n            }\n\n            network.setMask(newmask, ipv6);\n\n            let output = [\n                network.toString(),\n            ];\n\n            for (let i = 0; i < subnetCount - 1; i++) {\n                network.ip.incrRange(network.mask.length - extraBits, extraBits, 1);\n                output.push(network.toString());\n            }\n\n            let $ol = $.mk('ol');\n            $.each(output, (_, el) => {\n                $ol.append($.mk('li').text(el));\n            });\n            $output.html($(`<div class=\"card-body\"/>`).html($ol));\n        }).on('reset', function () {\n            $output.empty();\n            $(this).find('.network-input').val('').trigger('change');\n        });\n\n        $(`#${ns}-predefined-data, #${ns}-predefined-data-v6`).on('click', function (e) {\n            e.preventDefault();\n\n            $network.val(this.id.indexOf('-v6') === -1 ? '10.0.0.0/8' : '2001:db8:85a3::1/64').trigger('change');\n            $subnets.val('11').trigger('change');\n            $form.triggerHandler('submit');\n        });\n    })('cidr');\n\n    (function (ns) {\n        const\n            $networks = $(`#${ns}-networks`),\n            $form = $(`#${ns}-form`),\n            $output = $(`#${ns}-output`),\n            $networksAlert = $(`#${ns}-networks-alert`);\n\n        $form.on('submit', function (e) {\n            e.preventDefault();\n\n            let networks = $networks.val().trim();\n            if (!networks)\n                return $output.empty();\n            networks = networks.split('\\n');\n\n            const ipv6 = ipversion(networks[0]) === '6';\n            const addresses = {};\n            $.each(networks, (_, network) => {\n                let address;\n                try {\n                    address = new Network(network);\n                    if ((ipv6 && address.ip instanceof IPV4Address) || (!ipv6 && address.ip instanceof IPV6Address)) {\n                        $networksAlert.children('.text').text(Laravel.jsLocales.summary_error_mixed_ip_versions).end().show();\n                        return $output.empty();\n                    }\n                } catch (err) {\n                    if (!(err instanceof ValidationError))\n                        throw err;\n                    $networksAlert.children('.text').text(err.message).end().show();\n                    return $output.empty();\n                }\n                addresses[address.ip.getBinary()] = true;\n            });\n\n            let uniqAddrs = Object.keys(addresses).sort();\n            const uniqAddrCnt = uniqAddrs.length;\n            if (uniqAddrCnt < 2) {\n                $networksAlert.children('.text').text(Laravel.jsLocales.summary_not_enough_addresses).end().show();\n                return $output.empty();\n            }\n            const maxLength = ipv6 ? 128 : 32;\n            let bit = 0;\n            loop:\n                for (; bit < maxLength; bit++) {\n                    const currbit = uniqAddrs[0][bit];\n                    for (let i = 1; i < uniqAddrCnt; i++) {\n                        if (currbit !== uniqAddrs[i][bit])\n                            break loop;\n                    }\n                }\n\n            if (bit === 0) {\n                $networksAlert.children('.text').text(Laravel.jsLocales.summary_uncommon).end().show();\n                return $output.empty();\n            }\n\n            $output.html(`<div class=\"card-body\">${(ipv6 ? IPV6Address : IPV4Address).fromBinary(uniqAddrs[0]) + '/' + bit}</div>`);\n        }).on('reset', function () {\n            $output.empty();\n        });\n\n        $(`#${ns}-predefined-data, #${ns}-predefined-data-v6`).on('click', function (e) {\n            e.preventDefault();\n\n            $networks.val(this.id.indexOf('-v6') === -1\n                ? `172.16.32.0/24\\n172.16.40.0/24\\n172.16.44.0/24\\n172.16.46.0/24`\n                : '2001:db8:acad:10::/64\\n2001:db8:acad:11::/64\\n2001:db8:acad:12::/64\\n2001:db8:acad:13::/64'\n            ).trigger('change');\n            $form.triggerHandler('submit');\n        });\n    })('summary');\n\n    (function (ns) {\n        const\n            $showOutput = $(`#${ns}-show-output`),\n            $showOutputAlert = $(`#${ns}-show-output-alert`),\n            $network = $(`#${ns}-network`),\n            $networkAlert = $(`#${ns}-network-alert`),\n            $form = $(`#${ns}-form`),\n            $output = $(`#${ns}-output`),\n            prefixListEntryPattern = ' *seq (-?\\\\d+) (permit|deny) ([\\\\d.]+)\\\\/(\\\\d{1,2})(?: ge (\\\\d{1,2}))?(?: le (\\\\d{1,2}))?',\n            prefixListEntryRegex = new RegExp(prefixListEntryPattern, 'g'),\n            prefixListRegex = new RegExp(`^ip prefix-list [a-zA-Z\\\\d_-]{1,63}: \\\\d+ entries(?:\\\\n(?:${prefixListEntryPattern}|description .{1,80}))+$`);\n\n        $showOutput.attr('pattern', prefixListRegex.source);\n\n        $form.on('submit', function (e) {\n            e.preventDefault();\n\n            let network = $network.val().trim();\n            if (!network)\n                return $output.empty();\n\n            if (ipversion(network) === '6') {\n                $networkAlert.children('.text').text(Laravel.jsLocales.error_ipv4_only).end().show();\n                return $output.empty();\n            }\n            try {\n                network = new Network(network);\n            } catch (err) {\n                if (!(err instanceof ValidationError))\n                    throw err;\n                $networkAlert.children('.text').text(err.message).end().show();\n                return $output.empty();\n            }\n            $networkAlert.hide();\n\n            const showOutput = $showOutput.val();\n            const entries = {};\n            if (!prefixListRegex.test(showOutput)) {\n                $showOutputAlert.children('.text').text(Laravel.jsLocales.prefix_list_error_show_invalid).end().show();\n                return $output.empty();\n            }\n            let parts;\n            while ((parts = prefixListEntryRegex.exec(showOutput)) !== null) {\n                let [seq, action, netAddress, maskLength, ge, le] = parts.slice(1);\n\n                try {\n                    let subnet = new Network(netAddress + '/' + maskLength);\n                    entries[seq] = new PrefixListEntry({seq, action, subnet, ge, le});\n                } catch (err) {\n                    if (!(err instanceof ValidationError))\n                        throw err;\n                    $showOutputAlert.children('.text').text($.translatePlaceholders(Laravel.jsLocales.prefix_list_error_seq_invalid, {seq}) + ': ' + err.message).end().show();\n                    return $output.empty();\n                }\n            }\n            $showOutputAlert.hide();\n\n            const keys = Object.keys(entries).sort();\n            console.log(entries, keys);\n            let matchingEntry = null;\n            for (let i = 0; i < keys.length; i++) {\n                const entry = entries[keys[i]];\n                if (entry.matches(network)) {\n                    matchingEntry = entry;\n                    break;\n                }\n            }\n\n            if (matchingEntry) {\n                $output.html(`<div class=\"alert alert-success\">${$.translatePlaceholders(Laravel.jsLocales.prefix_list_match, {\n                    action: `<strong class=\"text-${matchingEntry.action === 'permit' ? 'success' : 'danger'}\">${matchingEntry.action}</strong>`,\n                    seq: matchingEntry.seq,\n                })}</div>`);\n            } else $output.html(`<div class=\"alert alert-danger\">${$.translatePlaceholders(Laravel.jsLocales.prefix_list_nomatch)}</div>`);\n        }).on('reset', function () {\n            $output.empty();\n        });\n\n        $(`#${ns}-predefined-data`).on('click', function (e) {\n            e.preventDefault();\n\n            $network.val($network.attr('placeholder')).trigger('change');\n            $showOutput.val($showOutput.attr('placeholder')).trigger('change');\n            $form.triggerHandler('submit');\n        });\n    })('prefix-list');\n\n    (function (ns) {\n        let $tbody = $(`#${ns}-tbody`);\n\n        for (let i = 0; i <= 32; i++) {\n            let mask = new Netmask(i, true);\n            $tbody.append(\n                `<tr>\n\t\t\t\t\t<td>/${i}</td>\n\t\t\t\t\t<td>${mask.getDecimal()}</td>\n\t\t\t\t\t<td>${mask.getReverseDecimal()}</td>\n\t\t\t\t</tr>`);\n        }\n\n    })('masktable');\n})(jQuery);\n"]}